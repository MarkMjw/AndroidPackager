/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package cn.markmjw.apk;

import cn.markmjw.apk.utils.FileUtil;
import cn.markmjw.apk.utils.Util;

import java.awt.Component;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.FilenameFilter;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PrintStream;
import java.util.Properties;

import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.filechooser.FileFilter;
import javax.swing.filechooser.FileNameExtensionFilter;

import org.apache.tools.ant.BuildEvent;
import org.apache.tools.ant.BuildException;
import org.apache.tools.ant.DefaultLogger;
import org.apache.tools.ant.Project;
import org.apache.tools.ant.ProjectHelper;

/**
 * 主界面
 *
 * @author markmjw
 * @date 2013-06-22
 */
public class MainFrame extends javax.swing.JFrame {
    /** Build 文件路径 */
    private static final String BUILD_FILE_HOME = "config";
    
    /** Build properties 文件名 */
    private static final String BUILD_PROPERTY_NAME = "build.properties";
    
    /** Build xml 文件名 */
    private static final String BUILD_XML_NAME = "build.xml";
    
    /** 默认Build properties 文件名 */
    private static final String BUILD_PROPERTY_NAME_DEFAULT = "default.properties";
    
    /** Build properties 文件路径 */
    private static final String BUILD_PROPERTY_PATH = BUILD_FILE_HOME + "/" + BUILD_PROPERTY_NAME;
    
     /** Build xml 文件路径 */
    private static final String BUILD_XML_PATH = BUILD_FILE_HOME + "/" + BUILD_XML_NAME;
    
    /** 默认Build properties 文件路径 */
    private static final String BUILD_PROPERTY_PATH_DEFAULT = BUILD_FILE_HOME + "/" + BUILD_PROPERTY_NAME_DEFAULT;

    /**
     * Creates new form MainFrame
     */
    public MainFrame() {
        initComponents();

        initListeners();
        initValues();
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLayeredPane1 = new javax.swing.JLayeredPane();
        mVerticalSplitPane = new javax.swing.JSplitPane();
        jPanel2 = new javax.swing.JPanel();
        mPanelKey = new javax.swing.JPanel();
        mKeyPathBtn = new javax.swing.JButton();
        mKeystorePathField = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        mKeystoreAlias = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        mKeystorePasswordField = new javax.swing.JPasswordField();
        mKeystoreAliasPasswordField = new javax.swing.JPasswordField();
        mPanelChannel = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        mChannelListTextArea = new javax.swing.JTextArea();
        mPanelProject1 = new javax.swing.JPanel();
        mProjectPathField = new javax.swing.JTextField();
        mProjectPathBtn = new javax.swing.JButton();
        mOutPathField = new javax.swing.JTextField();
        mOutPathBtn = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        mProjectNameField = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        mProjectVersionFiled = new javax.swing.JTextField();
        mLibsPathField = new javax.swing.JTextField();
        mLibsPathBtn = new javax.swing.JButton();
        mPanelPath1 = new javax.swing.JPanel();
        mJdkPathField = new javax.swing.JTextField();
        mJdkPathBtn = new javax.swing.JButton();
        mSdkPathField = new javax.swing.JTextField();
        mSdkPathBtn = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        mLogTextArea = new javax.swing.JTextArea();
        jPanel4 = new javax.swing.JPanel();
        mStartBtn = new javax.swing.JButton();
        mCancelBtn = new javax.swing.JButton();
        mCleanLogBtn = new javax.swing.JButton();
        mSaveConfigBtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Android自动打包工具");
        setName("mainFrame"); // NOI18N

        mVerticalSplitPane.setDividerLocation(430);
        mVerticalSplitPane.setAutoscrolls(true);
        mVerticalSplitPane.setPreferredSize(new java.awt.Dimension(900, 650));

        mPanelKey.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "签名设置", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, null, new java.awt.Color(0, 0, 255)));

        mKeyPathBtn.setText("Keystore路径");

        mKeystorePathField.setEditable(false);

        jLabel3.setText("Keystore密码：");

        jLabel4.setText("Keystore别名：");

        jLabel5.setText("Keystore别名密码：");

        javax.swing.GroupLayout mPanelKeyLayout = new javax.swing.GroupLayout(mPanelKey);
        mPanelKey.setLayout(mPanelKeyLayout);
        mPanelKeyLayout.setHorizontalGroup(
            mPanelKeyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mPanelKeyLayout.createSequentialGroup()
                .addComponent(mKeystorePathField)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(mKeyPathBtn))
            .addGroup(mPanelKeyLayout.createSequentialGroup()
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(mKeystorePasswordField))
            .addGroup(mPanelKeyLayout.createSequentialGroup()
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(mKeystoreAlias, javax.swing.GroupLayout.DEFAULT_SIZE, 99, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(mKeystoreAliasPasswordField, javax.swing.GroupLayout.DEFAULT_SIZE, 108, Short.MAX_VALUE))
        );
        mPanelKeyLayout.setVerticalGroup(
            mPanelKeyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mPanelKeyLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(mPanelKeyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(mKeystorePathField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(mKeyPathBtn))
                .addGap(18, 18, 18)
                .addGroup(mPanelKeyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(mKeystorePasswordField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(mPanelKeyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(mKeystoreAlias, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5)
                    .addComponent(mKeystoreAliasPasswordField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        mPanelChannel.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "渠道设置", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, null, new java.awt.Color(0, 0, 255)));

        mChannelListTextArea.setColumns(20);
        mChannelListTextArea.setFont(new java.awt.Font("Monospaced", 0, 14)); // NOI18N
        mChannelListTextArea.setLineWrap(true);
        mChannelListTextArea.setRows(5);
        jScrollPane4.setViewportView(mChannelListTextArea);

        javax.swing.GroupLayout mPanelChannelLayout = new javax.swing.GroupLayout(mPanelChannel);
        mPanelChannel.setLayout(mPanelChannelLayout);
        mPanelChannelLayout.setHorizontalGroup(
            mPanelChannelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane4, javax.swing.GroupLayout.Alignment.TRAILING)
        );
        mPanelChannelLayout.setVerticalGroup(
            mPanelChannelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 193, Short.MAX_VALUE)
        );

        mPanelProject1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "项目设置", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, null, new java.awt.Color(0, 0, 255)));

        mProjectPathField.setEditable(false);

        mProjectPathBtn.setText("项目路径");

        mOutPathField.setEditable(false);

        mOutPathBtn.setText("存放路径");

        jLabel1.setText("项目名称：");

        jLabel2.setText("项目版本：");

        mLibsPathField.setEditable(false);

        mLibsPathBtn.setText("Libs路径");

        javax.swing.GroupLayout mPanelProject1Layout = new javax.swing.GroupLayout(mPanelProject1);
        mPanelProject1.setLayout(mPanelProject1Layout);
        mPanelProject1Layout.setHorizontalGroup(
            mPanelProject1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mPanelProject1Layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(mProjectNameField)
                .addGap(38, 38, 38)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(mProjectVersionFiled))
            .addGroup(mPanelProject1Layout.createSequentialGroup()
                .addComponent(mProjectPathField)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(mProjectPathBtn))
            .addGroup(mPanelProject1Layout.createSequentialGroup()
                .addComponent(mOutPathField)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(mOutPathBtn))
            .addGroup(mPanelProject1Layout.createSequentialGroup()
                .addComponent(mLibsPathField)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(mLibsPathBtn))
        );
        mPanelProject1Layout.setVerticalGroup(
            mPanelProject1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mPanelProject1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(mPanelProject1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(mProjectPathField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(mProjectPathBtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(mPanelProject1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(mOutPathField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(mOutPathBtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(mPanelProject1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(mLibsPathField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(mLibsPathBtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(mPanelProject1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(mProjectVersionFiled, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(mProjectNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addContainerGap())
        );

        mPanelPath1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "编译环境", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, null, new java.awt.Color(0, 0, 255)));

        mJdkPathField.setEditable(false);

        mJdkPathBtn.setText("JDK路径");

        mSdkPathField.setEditable(false);

        mSdkPathBtn.setText("SDK路径");

        javax.swing.GroupLayout mPanelPath1Layout = new javax.swing.GroupLayout(mPanelPath1);
        mPanelPath1.setLayout(mPanelPath1Layout);
        mPanelPath1Layout.setHorizontalGroup(
            mPanelPath1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mPanelPath1Layout.createSequentialGroup()
                .addGroup(mPanelPath1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(mJdkPathField)
                    .addComponent(mSdkPathField))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(mPanelPath1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(mJdkPathBtn, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(mSdkPathBtn, javax.swing.GroupLayout.Alignment.TRAILING)))
        );
        mPanelPath1Layout.setVerticalGroup(
            mPanelPath1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mPanelPath1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(mPanelPath1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(mJdkPathField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(mJdkPathBtn))
                .addGap(18, 18, 18)
                .addGroup(mPanelPath1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(mSdkPathField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(mSdkPathBtn))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mPanelChannel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(mPanelKey, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(mPanelProject1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(mPanelPath1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(mPanelPath1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(mPanelProject1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(mPanelKey, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(mPanelChannel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        mVerticalSplitPane.setLeftComponent(jPanel2);

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "日志输出", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, null, new java.awt.Color(0, 0, 255)));

        mLogTextArea.setEditable(false);
        mLogTextArea.setBackground(new java.awt.Color(0, 0, 0));
        mLogTextArea.setColumns(20);
        mLogTextArea.setFont(new java.awt.Font("Monospaced", 0, 14)); // NOI18N
        mLogTextArea.setForeground(new java.awt.Color(255, 255, 255));
        mLogTextArea.setRows(5);
        jScrollPane3.setViewportView(mLogTextArea);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.TRAILING)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 510, Short.MAX_VALUE)
        );

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "操作区域", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, null, new java.awt.Color(0, 0, 255)));

        mStartBtn.setText("开始");
        mStartBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mStartBtnActionPerformed(evt);
            }
        });

        mCancelBtn.setText("取消");
        mCancelBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mCancelBtnActionPerformed(evt);
            }
        });

        mCleanLogBtn.setText("清除日志");
        mCleanLogBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mCleanLogBtnActionPerformed(evt);
            }
        });

        mSaveConfigBtn.setText("保存配置");
        mSaveConfigBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mSaveConfigBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(mStartBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(mCancelBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(mCleanLogBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10)
                .addComponent(mSaveConfigBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(39, Short.MAX_VALUE))
        );

        jPanel4Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {mCancelBtn, mCleanLogBtn, mSaveConfigBtn, mStartBtn});

        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(mStartBtn)
                    .addComponent(mCancelBtn)
                    .addComponent(mCleanLogBtn)
                    .addComponent(mSaveConfigBtn))
                .addContainerGap(32, Short.MAX_VALUE))
        );

        jPanel4Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {mCancelBtn, mCleanLogBtn, mSaveConfigBtn, mStartBtn});

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        mVerticalSplitPane.setRightComponent(jPanel1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mVerticalSplitPane, javax.swing.GroupLayout.DEFAULT_SIZE, 915, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mVerticalSplitPane, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void mStartBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mStartBtnActionPerformed
        if (Util.isEmpty(mProjectPathField.getText())) {
            showErrorDialog("必须指定项目目录");
            return;
        }
        
        if (Util.isEmpty(mSdkPathField.getText())) {
            showErrorDialog("必须指定Android SDK目录");
            return;
        }
        
        if (Util.isEmpty(mJdkPathField.getText())) {
            showErrorDialog("必须指定JDK目录");
            return;
        }
        
        if (Util.isEmpty(mKeystorePathField.getText())) {
            showErrorDialog("必须指定Keystore");
            return;
        }
        
        if (Util.isEmpty(mKeystorePasswordField.getText())) {
            showErrorDialog("必须输入Keystore密码");
            return;
        }
        
        if (Util.isEmpty(mKeystoreAlias.getText())) {
            showErrorDialog("必须输入Keystore别名");
            return;
        }
        
        if (Util.isEmpty(mKeystoreAliasPasswordField.getText())) {
            showErrorDialog("必须输入Keystore别名密码");
            return;
        }
        
        if (Util.isEmpty(mOutPathField.getText())) {
            showErrorDialog("必须指定包存放目录");
            return;
        }
        
        if (Util.isEmpty(mLibsPathField.getText())) {
            showErrorDialog("必须指定Libs目录必须");
            return;
        }
        
        if (Util.isEmpty(mProjectVersionFiled.getText())) {
            showErrorDialog("必须输入版本号");
            return;
        }
        
        if (Util.isEmpty(mProjectNameField.getText())) {
            showErrorDialog("必须输入项目名称");
            return;
        }
        
        if (Util.isEmpty(mChannelListTextArea.getText())) {
            showErrorDialog("必须输入渠道号");
            return;
        }

        mStartBtn.setEnabled(false);
        mStartBtn.setText("打包中...");
        mLogTextArea.setText("...");

        prepareAntBuild();

        new Thread() {
            @Override
            public void run() {
                antBuild();
            }
        }.start();
    }//GEN-LAST:event_mStartBtnActionPerformed

    private void mCancelBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mCancelBtnActionPerformed
        mLogTextArea.append("暂不支持取消操作...\n");
    }//GEN-LAST:event_mCancelBtnActionPerformed

    private void mCleanLogBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mCleanLogBtnActionPerformed
        mLogTextArea.setText("");
    }//GEN-LAST:event_mCleanLogBtnActionPerformed

    private void mSaveConfigBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mSaveConfigBtnActionPerformed
        try {
            File targetProFile = new File(BUILD_PROPERTY_PATH_DEFAULT);
            if (targetProFile.exists()) {
                targetProFile.delete();
            }
            targetProFile.createNewFile();

            writeProperties(BUILD_PROPERTY_PATH_DEFAULT);
            JOptionPane.showMessageDialog(null, "保存成功！", "Message", JOptionPane.INFORMATION_MESSAGE);
        } catch (IOException ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_mSaveConfigBtnActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                MainFrame mainFrame = new MainFrame();
                mainFrame.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
                mainFrame.setLocationRelativeTo(null);
                mainFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
                mainFrame.setVisible(true);
            }
        });
    }

    private void setLookAndFeel(String s) {
        try {
            UIManager.setLookAndFeel(s);
            SwingUtilities.updateComponentTreeUI(this);
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException e) {
            e.printStackTrace();
        }
    }
    
    private void initListeners() {
        mJdkPathBtn.addActionListener(new FileChooserActionListener(this, mJdkPathField, true));
        mSdkPathBtn.addActionListener(new FileChooserActionListener(this, mSdkPathField, true));

        mProjectPathBtn.addActionListener(new FileChooserActionListener(this, mProjectPathField, true));
        mOutPathBtn.addActionListener(new FileChooserActionListener(this, mOutPathField, true));
        mLibsPathBtn.addActionListener(new FileChooserActionListener(this, mLibsPathField, true));

        mKeyPathBtn.addActionListener(
                new FileChooserActionListener(this,
                mKeystorePathField,
                new FileNameExtensionFilter("Keystore source", new String[]{"keystore"})));
    }

    private void initValues() {
        Properties propertis = new Properties();
        
        File buildFile = new File(BUILD_PROPERTY_PATH_DEFAULT);
        String javaHome = null;
        if (buildFile.exists()) {
            try {
                InputStream input = new FileInputStream(BUILD_PROPERTY_PATH_DEFAULT);
                propertis.load(input);

                javaHome = propertis.getProperty("java.home");
            } catch (IOException e) {
                e.printStackTrace();
            }
        } else {
            propertis = System.getProperties();
            javaHome = propertis.getProperty("java.home");
        }

        String sdkHome = propertis.getProperty("sdk.home");

        String keyStore = propertis.getProperty("key.store");
        String keyStorePassword = propertis.getProperty("key.store.password");
        String keyAlias = propertis.getProperty("key.alias");
        String keyAliasPassword = propertis.getProperty("key.alias.password");

        String projectHome = propertis.getProperty("project.dir");
        String projectName = propertis.getProperty("project.name");
        String projectVersion = propertis.getProperty("project.version");
        String jarLibs = propertis.getProperty("jar.libs.dir");
        String channelList = propertis.getProperty("channel.list");
        String apkOutPath = propertis.getProperty("apk.out.dir");

        if (!Util.isEmpty(sdkHome)) {
            mSdkPathField.setText(sdkHome);
        }
        if (!Util.isEmpty(javaHome)) {
            mJdkPathField.setText(javaHome);
        }

        if (!Util.isEmpty(keyStore)) {
            mKeystorePathField.setText(keyStore);
        }
        if (!Util.isEmpty(keyStorePassword)) {
            mKeystorePasswordField.setText(keyStorePassword);
        }
        if (!Util.isEmpty(keyAlias)) {
            mKeystoreAlias.setText(keyAlias);
        }
        if (!Util.isEmpty(keyAliasPassword)) {
            mKeystoreAliasPasswordField.setText(keyAliasPassword);
        }

        if (!Util.isEmpty(projectHome)) {
            mProjectPathField.setText(projectHome);
        }
        if (!Util.isEmpty(projectName)) {
            mProjectNameField.setText(projectName);
        }
        if (!Util.isEmpty(projectVersion)) {
            mProjectVersionFiled.setText(projectVersion);
        }
        if (!Util.isEmpty(jarLibs)) {
            mLibsPathField.setText(jarLibs);
        }
        if (!Util.isEmpty(channelList)) {
            mChannelListTextArea.setText(channelList);
        }
        if (!Util.isEmpty(apkOutPath)) {
            mOutPathField.setText(apkOutPath);
        }
    }

    private void prepareAntBuild() {
        writeProperties(BUILD_PROPERTY_PATH);

        copyPropertyFile();
    }

    private void writeProperties(String fileName) {
        Properties prop = new Properties();
        InputStream in = null;
        OutputStream out = null;
        
        try {
            in = new FileInputStream(fileName);
            prop.load(in);

            out = new FileOutputStream(fileName);
            prop.setProperty("java.home", mJdkPathField.getText());
            prop.setProperty("sdk.home", mSdkPathField.getText());
            
            prop.setProperty("key.store", mKeystorePathField.getText());
            prop.setProperty("key.store.password", new String(mKeystorePasswordField.getPassword()));
            prop.setProperty("key.alias", mKeystoreAlias.getText());
            prop.setProperty("key.alias.password", new String(mKeystoreAliasPasswordField.getPassword()));
            
            prop.setProperty("project.dir", mProjectPathField.getText());
            prop.setProperty("project.name", mProjectNameField.getText());
            prop.setProperty("project.version", mProjectVersionFiled.getText());
            prop.setProperty("jar.libs.dir", mLibsPathField.getText());
            prop.setProperty("channel.list", mChannelListTextArea.getText());
            prop.setProperty("apk.out.dir", mOutPathField.getText());
            prop.setProperty("build.first", "false");

            prop.store(out, "Save");
        } catch (IOException e) {
            try {
                if (in != null) {
                    in.close();
                }
                
                if (out != null) {
                    out.close();
                }
            } catch (IOException e1) {
                e1.printStackTrace();
            }
        }
    }

    private void copyPropertyFile() {
        String projectHome = mProjectPathField.getText();

        // 如果目标工程包含build.properties文件，则先重命名为临时文件
        File targetProFile = new File(projectHome + File.separator + BUILD_PROPERTY_NAME);
        if (targetProFile.exists()) {
            File tempFile = new File(projectHome + File.separator + BUILD_PROPERTY_NAME + ".temp");
            targetProFile.renameTo(tempFile);
        }

        // 如果目标工程包含build.xml文件，则先重命名为临时文件
        File targetBuildFile = new File(projectHome + File.separator + BUILD_XML_NAME);
        if (targetBuildFile.exists()) {
            File tempFile = new File(projectHome + File.separator + BUILD_XML_NAME + ".temp");
            targetBuildFile.renameTo(tempFile);
        }

        // 复制自己生成的文件到目标工程
        File sourceProFile = new File(BUILD_PROPERTY_PATH);
        File sourceBuildFile = new File(BUILD_XML_PATH);
        try {
            targetProFile.createNewFile();
            FileUtil.copyFile(sourceProFile, targetProFile);

            targetBuildFile.createNewFile();
            FileUtil.copyFile(sourceBuildFile, targetBuildFile);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    /**
     * 核心方法，ant打包关键步骤
     */
    private void antBuild() {
        CustomPrintStream out = new CustomPrintStream(new ByteArrayOutputStream(), mLogTextArea);
        
        DefaultLogger consoleLogger = new DefaultLogger() {
            @Override
            public void buildFinished(BuildEvent event) {
                super.buildFinished(event);
                antBuildFinished();
            }
        };
        consoleLogger.setErrorPrintStream(out);
        consoleLogger.setOutputPrintStream(out);
        consoleLogger.setMessageOutputLevel(2);
        
        Project project = new Project();
        project.setProperty("java.home", mJdkPathField.getText());
        project.addBuildListener(consoleLogger);

        try {
            project.fireBuildStarted();
            project.init();
            
            File buildFile = new File(mProjectPathField.getText() + File.separator + BUILD_XML_NAME);
            ProjectHelper.configureProject(project, buildFile);
            project.executeTarget(project.getDefaultTarget());
            project.fireBuildFinished(null);
        } catch (BuildException e) {
            project.fireBuildFinished(e);
        }

        mLogTextArea.append(out.toString());
    }

    private void antBuildFinished() {
        mStartBtn.setEnabled(true);
        mStartBtn.setText("打包");

        cleanTempFile();
    }

    private void cleanTempFile() {
        String projectHome = mProjectPathField.getText();

        // build结束删除build.properties文件
        File targetProFile = new File(projectHome + File.separator + BUILD_PROPERTY_NAME);
        if (targetProFile.exists()) {
            targetProFile.delete();

            // 还原build.properties文件
            File tempFile = new File(projectHome + File.separator + BUILD_PROPERTY_NAME + ".temp");
            tempFile.renameTo(targetProFile);
        }

        // build结束删除build.xml文件
        File targetBuildFile = new File(projectHome + File.separator + BUILD_XML_NAME);
        if (targetBuildFile.exists()) {
            targetBuildFile.delete();

            // 还原build.xml文件
            File tempFile = new File(projectHome + File.separator + BUILD_XML_NAME + ".temp");
            tempFile.renameTo(targetBuildFile);
        }
    }
    
    private void showErrorDialog(String msg) {
        JOptionPane.showMessageDialog(null, msg, "Error", JOptionPane.ERROR_MESSAGE);
    }
    
    private void findPath(String path) {
        // libs路径
        String libPath = path + File.separator + "libs";
        File libDir = new File(libPath);
        if (libDir.exists() && libDir.isDirectory()) {
            mLibsPathField.setText(libPath);
        }
        
        // 项目名称
        String projectName = path.substring(path.lastIndexOf(File.separator) + 1);
        if (!Util.isEmpty(projectName)) {
            mProjectNameField.setText(projectName);
        }
        
        // keyStore路径
        File projectDir = new File(path);
        if (projectDir.exists() && projectDir.isDirectory()) {
            File[] files = projectDir.listFiles(new FilenameFilter() {
                @Override
                public boolean accept(File file, String fileName) {
                    if (fileName.endsWith(".keystore")) {
                        return true;
                    }
                    return false;
                }
            });
            if (null != files && files.length > 0) {
                for (File file : files) {
                    if (file.isFile()) {
                        mKeystorePathField.setText(file.getPath());
                    }
                }
            }
        }
    }

    private class FileChooserActionListener implements ActionListener {

        private Component mParent;
        private JTextField mTextField;
        private FileFilter mFileFilter;
        private boolean mChooseDirector;
        
        private String mFilePath;

        public FileChooserActionListener(Component parent, JTextField textField, FileFilter filter) {
            this.mTextField = textField;
            this.mFileFilter = filter;
        }

        public FileChooserActionListener(Component parent, JTextField textField, boolean isDir) {
            this.mTextField = textField;
            this.mChooseDirector = isDir;
        }

        @Override
        public void actionPerformed(ActionEvent e) {
            initOpenPath();
            
            JFileChooser chooser = new JFileChooser();
            
            if (!Util.isEmpty(mFilePath)) {
                chooser = new JFileChooser(new File(mFilePath));
            }
            
            if (mChooseDirector) {
                chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
            }
            
            if ((mFileFilter != null) && (!mChooseDirector)) {
                chooser.addChoosableFileFilter(mFileFilter);
                chooser.setAcceptAllFileFilterUsed(true);
                chooser.setFileFilter(mFileFilter);
            }
            
            int status = chooser.showOpenDialog(mParent);
            if (status == JFileChooser.APPROVE_OPTION) {
                File f = chooser.getSelectedFile();
                if (mTextField != null) {
                    String path = f.getAbsolutePath();
                    mTextField.setText(path);

                    // 当选择项目路径之后默认去寻找一些相关的文件或目录路径
                    if (mTextField == mProjectPathField) {
                        findPath(path);
                    }
                }
            }
        }

        private void initOpenPath() {
            String path = mTextField.getText();
            if (!Util.isEmpty(path)) {
                File file = new File(path);

                if (file.exists()) {
                    if (file.isDirectory()) {
                        mFilePath = path;
                    } else if (file.isFile()) {
                        mFilePath = file.getParent();
                    }
                }
            }
        }
    }

    private class CustomPrintStream extends PrintStream {

        private JTextArea mTextArea;

        public CustomPrintStream(OutputStream out, JTextArea textArea) {
            super(out);
            this.mTextArea = textArea;
        }

        @Override
        public void write(byte[] buf, int off, int len) {
            final String message = new String(buf, off, len);

            SwingUtilities.invokeLater(new Runnable() {
                @Override
                public void run() {
                    CustomPrintStream.this.mTextArea.append(message);
                }
            });
        }
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLayeredPane jLayeredPane1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JButton mCancelBtn;
    private javax.swing.JTextArea mChannelListTextArea;
    private javax.swing.JButton mCleanLogBtn;
    private javax.swing.JButton mJdkPathBtn;
    private javax.swing.JTextField mJdkPathField;
    private javax.swing.JButton mKeyPathBtn;
    private javax.swing.JTextField mKeystoreAlias;
    private javax.swing.JPasswordField mKeystoreAliasPasswordField;
    private javax.swing.JPasswordField mKeystorePasswordField;
    private javax.swing.JTextField mKeystorePathField;
    private javax.swing.JButton mLibsPathBtn;
    private javax.swing.JTextField mLibsPathField;
    private javax.swing.JTextArea mLogTextArea;
    private javax.swing.JButton mOutPathBtn;
    private javax.swing.JTextField mOutPathField;
    private javax.swing.JPanel mPanelChannel;
    private javax.swing.JPanel mPanelKey;
    private javax.swing.JPanel mPanelPath1;
    private javax.swing.JPanel mPanelProject1;
    private javax.swing.JTextField mProjectNameField;
    private javax.swing.JButton mProjectPathBtn;
    private javax.swing.JTextField mProjectPathField;
    private javax.swing.JTextField mProjectVersionFiled;
    private javax.swing.JButton mSaveConfigBtn;
    private javax.swing.JButton mSdkPathBtn;
    private javax.swing.JTextField mSdkPathField;
    private javax.swing.JButton mStartBtn;
    private javax.swing.JSplitPane mVerticalSplitPane;
    // End of variables declaration//GEN-END:variables
}
